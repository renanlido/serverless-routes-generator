{"version":3,"sources":["../src/index.ts","../src/route-importer.ts","../src/route-generator.ts","../src/route-decorator.ts"],"sourcesContent":["import fs from 'fs'\nimport * as path from 'path'\n\nimport { generate } from './route-importer'\n\nexport type GeneratorConfigFileData = {\n  pathPattern: string\n  projectRoot: string\n  generatedFileName?: string\n}\n\nexport { createHandler } from './route-decorator'\n\nexport default async function importConfigFile() {\n  try {\n    const filename = 'serverless-route.config'\n\n    const configFileJson = path.join(process.cwd(), `${filename}.json`)\n\n    if (fs.existsSync(configFileJson)) {\n      const data = fs.readFileSync(configFileJson, 'utf-8')\n\n      const parse = JSON.parse(data) as GeneratorConfigFileData\n\n      await generate(parse)\n\n      return\n    }\n\n    const configFileJs = path.join(process.cwd(), `${filename}.js`)\n\n    if (fs.existsSync(configFileJs)) {\n      const data = await import(configFileJs)\n\n      const configData = data.default as GeneratorConfigFileData\n\n      await generate(configData)\n\n      return\n    }\n\n    throw new Error(\n      `Could not find config file at ${configFileJson} or ${configFileJs}`,\n    )\n  } catch (error) {\n    const err = error as Error\n\n    console.error(err.message)\n    process.exit(1)\n  }\n}\n\n// Executa o gerador\nimportConfigFile().catch(console.error)\n","import * as path from 'path'\nimport url from 'url'\n\nimport { globSync } from 'glob'\n\nimport { ServerlessGenerator } from './route-generator'\n\nimport { GeneratorConfigFileData } from '.'\n\nasync function importAllHandlers(data: GeneratorConfigFileData) {\n  const handlersPath = path.join(\n    process.cwd(),\n    `${data.projectRoot.concat('/').concat(data.pathPattern)}`,\n  )\n\n  const handlers = globSync(handlersPath)\n\n  for (const handler of handlers) {\n    try {\n      // Importa cada handler para registrar as rotas\n      const handlerUrl = url.pathToFileURL(handler).href\n      await import(handlerUrl)\n    } catch (error) {\n      console.warn(`Warning: Could not import handler at ${handler}`, error)\n    }\n  }\n}\n\nexport async function generate(data: GeneratorConfigFileData) {\n  try {\n    // Primeiro importa todos os handlers\n    await importAllHandlers(data)\n\n    const fileName = data?.generatedFileName ?? 'serverless-route'\n\n    // Depois gera o serverless.ts\n    const projectRoot = process.cwd()\n    const srcPath = path.join(projectRoot, data.projectRoot)\n    const serverlessPath = path.join(projectRoot, `${fileName}.js`)\n\n    const generator = new ServerlessGenerator(srcPath, serverlessPath)\n\n    generator.generate()\n\n    console.log('Route generation completed successfully!')\n  } catch (error) {\n    console.error('Error generating routes:', error)\n    process.exit(1)\n  }\n}\n","// tools/serverless-router-generator/route-generator.ts\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { getRouteConfigs } from './route-decorator'\n\n// tools/generate-routes.ts\n\nexport class ServerlessGenerator {\n  constructor(\n    private readonly basePath: string,\n    private readonly outputPath: string,\n  ) {}\n\n  private generateServerlessConfig(): string {\n    const routes = getRouteConfigs()\n\n    const functions: Record<string, unknown> = {}\n\n    routes.forEach((route) => {\n      const functionName = route.name || route.path.replace(/\\//g, '-')\n\n      const handlerPath = path.relative(\n        this.basePath,\n        path.join(this.basePath, route.context, route.handler),\n      )\n\n      functions[functionName] = {\n        handler: handlerPath,\n        events: [\n          {\n            http: {\n              cors: route.cors ?? true,\n              method: route.method,\n              path: route.path,\n            },\n          },\n        ],\n      }\n    })\n\n    return `\n    module.exports = {\n      functions: ${JSON.stringify(functions, null, 2)}\n    };`\n  }\n\n  public generate(): void {\n    const config = this.generateServerlessConfig()\n\n    fs.writeFileSync(this.outputPath, config)\n    console.log(`Serverless config generated at ${this.outputPath}`)\n  }\n}\n","import path from \"path\";\n\n// src/shared/decorators/route.ts\ntype HttpMethod = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\";\n\ninterface RouteConfig {\n\tmethod: HttpMethod;\n\tpath: string;\n\tcors?: boolean;\n\tname?: string;\n}\n\nenum LAMBDA_NAMES {\n\tAWS = \"AWS_LAMBDA_FUNCTION_NAME\",\n\tAZURE = \"AZURE_FUNCTIONS_ENVIRONMENT\",\n\tGOOGLE = \"GOOGLE_CLOUD_FUNCTION_NAME\",\n}\n\nconst lambdaIsRunning = () => {\n\tif (\n\t\tprocess.env[LAMBDA_NAMES.AWS] ||\n\t\tprocess.env[LAMBDA_NAMES.AZURE] ||\n\t\tprocess.env[LAMBDA_NAMES.GOOGLE]\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nconst routeConfigs = new Map<string, RouteConfig & { context: string }>();\n\nfunction getContext(match: RegExpMatchArray) {\n\tif (match && match[1]) {\n\t\tconst fullPath = match[1];\n\n\t\tconst directory = path.dirname(fullPath);\n\n\t\tconst indexSRC = directory.indexOf(path.join(\"src\"));\n\n\t\tif (indexSRC !== -1) {\n\t\t\tconst relativePath = directory.substring(indexSRC);\n\t\t\treturn relativePath;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport const createHandler = (\n\tconfig: RouteConfig,\n\thandler: (...args: unknown[]) => unknown,\n) => {\n\tif (lambdaIsRunning()) {\n\t\treturn handler;\n\t}\n\n\t// Registra a configuração usando o nome do arquivo + nome da função como chave\n\tconst matchPath = new Error()\n\t\t.stack!.split(\"\\n\")[2]\n\t\t.match(/\\(([^:]+):\\d+:\\d+\\)/);\n\n\tif (!matchPath) {\n\t\tthrow new Error(\"Could not find handler path\");\n\t}\n\n\tconst context = getContext(matchPath);\n\n\tif (!context) {\n\t\tthrow new Error(\"Could not find handler context\");\n\t}\n\n\tconst fileName =\n\t\tnew Error().stack!.split(\"\\n\")[2].match(/[/\\\\]([\\w\\-. ]+)\\.[jt]s/)?.[1] ||\n\t\t\"unknown\";\n\n\tconst key = `${fileName}.${config.name}`;\n\n\trouteConfigs.set(key, { ...config, context });\n\n\treturn handler;\n};\n\nexport const getRouteConfigs = () => {\n\treturn Array.from(routeConfigs.entries()).map(([handler, config]) => ({\n\t\thandler,\n\t\t...config,\n\t}));\n};\n"],"mappings":"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","names":["path","path","path","lambdaIsRunning","process","env","routeConfigs","Map","getContext","match","fullPath","directory","path","dirname","indexSRC","indexOf","join","relativePath","substring","createHandler","config","handler","matchPath","Error","stack","split","context","fileName","key","name","set","getRouteConfigs","Array","from","entries","map","ServerlessGenerator","constructor","basePath","outputPath","generateServerlessConfig","routes","getRouteConfigs","functions","forEach","route","functionName","name","path","replace","handlerPath","relative","join","context","handler","events","http","cors","method","JSON","stringify","generate","config","fs","writeFileSync","console","log","importAllHandlers","data","handlersPath","join","process","cwd","projectRoot","concat","pathPattern","handlers","globSync","handler","handlerUrl","url","pathToFileURL","href","error","console","warn","generate","fileName","generatedFileName","srcPath","serverlessPath","generator","ServerlessGenerator","log","exit","importConfigFile","filename","configFileJson","join","process","cwd","fs","existsSync","data","readFileSync","parse","JSON","generate","configFileJs","configData","default","Error","error","err","console","message","exit","catch"]}